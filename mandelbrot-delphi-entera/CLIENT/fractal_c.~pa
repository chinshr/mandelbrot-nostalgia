(*
 * Client Proxy Procededure Code for dce
 * for language Delphi, version (3.0)
 * generated by Entera IDL version (1.0)
 * on Thu Sep 03 18:33:18 1998
 *
 * Interface:
 * name: fractal
 * uuid: 61a740ae-9699-11d1-aa8b-00c04fb17a3a version(1.1)
 *
 * Service Interface:
 * name: fractal
 * uuid: 61a740ae-9699-11d1-aa8b-00c04fb17a3a version(1.1)
 *)

unit fractal_c;
interface

uses SysUtils, Classes, oden40, odenconst40, fractal_hc;

function  open (
	cd : client_data_t
	)  :  Cardinal;

function  close (
	handle : Cardinal
	)  :  client_data_t;

function  get_next (
	handle : Cardinal;
	var outwidth : Longint;
	var row : variant 
	)  :  Longint;

function  query_server (
	var server_data : server_data_t
	)  :  Longint;


implementation


function ode_cln_ifspec_fractal_1_1 (odeStatus : Longint) : Pointer;
	begin
	 ode_cln_ifspec_fractal_1_1 := ode_dstb_new_ifspec(
		4,               (* number of operations in the interface *)
		1,               (* interface major version number *)
		1,               (* interface minor version number *)
		'61a740ae-9699-11d1-aa8b-00c04fb17a3a',            (* interface uuid *)
		nil,              (* server epv *)
		nil,              (* manager epv *)
		@odeStatus);
	end;


function ode_cln_bind_fractal : Longint;
   var
	odeStatus : Longint;
	odeRpcIfspec : Pointer;

   begin
	odeStatus := ode_s_ok;
	odeRpcIfspec := ode_cln_ifspec_fractal_1_1 (odeStatus);
	if (odeStatus <> ode_s_ok) then
		ode_cln_bind_fractal := odeStatus
	else
	begin

		odeStatus := ode_dstb_stb_bind_server (
		odeRpcIfspec,
		0,
		'fractal',
		'',
		0);
		ode_cln_bind_fractal := odeStatus;
	end;
   end;

function  open (
	cd : client_data_t
	)  :  Cardinal;

   var
	(*  ODECOMMENT BEGIN DECLARATIONS fractal open *)

	odepArgInfo  :  Pointer;
	odeStatus  :  Longint;
	odepStatus  :  Pointer;
	odeRpcIfspec  :  Pointer;
	odeSvcIfspec  :  Pointer;
	odeBindingHandle  :  Pointer;
	odeStubType : Longint;
	odeFaultStatus : Longint;
	odeCommStatus : Longint;
	odePtrNumber  :  Longint;
	odeHasBeenMarshalled  :  Longint;
	odeUseSmAllocate  :  Longint;
	odeNewNode  :  Longint;
	odeResult : Cardinal;
	odeActualSize_0 : Longint;
	odeMaxSize_0 : Longint;
	odeOffset_0 : Longint;
	odeIdx_0 : Longint;
	odeActualSize_1 : Longint;
	odeMaxSize_1 : Longint;
	odeOffset_1 : Longint;
	odeIdx_1 : Longint;
	odeActualSize_2 : Longint;
	odeMaxSize_2 : Longint;
	odeOffset_2 : Longint;
	odeIdx_2 : Longint;

	(*  ODECOMMENT END DECLARATIONS fractal open  *)

   begin
	odepArgInfo  := nil;
	odeStatus  := ode_s_ok;
	odepStatus  := @odeStatus;
	odeRpcIfspec  := nil;
	odeSvcIfspec  := nil;
	odeBindingHandle  := nil;
	odePtrNumber  := 0;
	odeHasBeenMarshalled  :=  0;
	odeUseSmAllocate  := 0;
	odeNewNode  := 0;
	odeResult := 0;
	odeRpcIfspec := ode_cln_ifspec_fractal_1_1 (odeStatus);
	odeStubType := ode_c_stub_is_client;
	odepArgInfo := ode_dstb_mar_init (
		odeStubType,
		odeRpcIfspec,
		odeSvcIfspec,
		@odeStatus);

	ode_dstb_init_ptr_table (odeStubType, odepArgInfo, @odeStatus);

	(*  ODECOMMENT BEGIN MARSHALLING fractal open *)
	if (odeStatus = ode_s_ok) then
	begin

	ode_dstb_push_align (odepArgInfo, 8, @odeStatus);
	odeHasBeenMarshalled := 0;
	if (cd.hostname = '') then
		odePtrNumber := 0
	else
		odePtrNumber := 1;
//	ode_dstb_register_ptr (odeStubType, odepArgInfo, cd.hostname, 0, @odePtrNumber, @odeHasBeenMarshalled, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odePtrNumber, odepStatus);
	odeHasBeenMarshalled := 0;
	if (cd.infrastructur = '') then
		odePtrNumber := 0
	else
		odePtrNumber := 1;
//	ode_dstb_register_ptr (odeStubType, odepArgInfo, cd.infrastructur, 0, @odePtrNumber, @odeHasBeenMarshalled, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odePtrNumber, odepStatus);
	odeHasBeenMarshalled := 0;
	if (cd.lan = '') then
		odePtrNumber := 0
	else
		odePtrNumber := 1;
//	ode_dstb_register_ptr (odeStubType, odepArgInfo, cd.lan, 0, @odePtrNumber, @odeHasBeenMarshalled, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odePtrNumber, odepStatus);
		ode_dstb_push_signed16 (odeStubType, odepArgInfo, 0, cd.width, @odeStatus);
		ode_dstb_push_signed16 (odeStubType, odepArgInfo, 0, cd.height, @odeStatus);
		ode_dstb_push_idl_byte (odeStubType, odepArgInfo, 0, cd.iterations, @odeStatus);
	ode_dstb_push_align (odepArgInfo, 8, @odeStatus);
		ode_dstb_push_double (odeStubType, odepArgInfo, 0, cd.mndset.imag_min, @odeStatus);
		ode_dstb_push_double (odeStubType, odepArgInfo, 0, cd.mndset.imag_max, @odeStatus);
		ode_dstb_push_double (odeStubType, odepArgInfo, 0, cd.mndset.real_min, @odeStatus);
		ode_dstb_push_double (odeStubType, odepArgInfo, 0, cd.mndset.real_max, @odeStatus);
		ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, cd.rpc_requests, @odeStatus);
		ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, cd.bytes_received, @odeStatus);
		ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, cd.bytes_sent, @odeStatus);
		ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, cd.rpc_time, @odeStatus);
	odeHasBeenMarshalled := 0;
	if (cd.hostname = '') then
		odePtrNumber := 0
	else
		odePtrNumber := 1;
//	ode_dstb_register_ptr (odeStubType, odepArgInfo, cd.hostname, 1, @odePtrNumber, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeMaxSize_0, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeOffset_0, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeActualSize_0, odepStatus);
		ode_dstb_push_idl_char_array (odeStubType, odepArgInfo, 0, @cd.hostname, odeActualSize_0, @odeStatus);
	end;
	odeHasBeenMarshalled := 0;
	if (cd.infrastructur = '') then
		odePtrNumber := 0
	else
		odePtrNumber := 1;
//	ode_dstb_register_ptr (odeStubType, odepArgInfo, cd.infrastructur, 1, @odePtrNumber, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeMaxSize_1, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeOffset_1, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeActualSize_1, odepStatus);
		ode_dstb_push_idl_char_array (odeStubType, odepArgInfo, 0, @cd.infrastructur, odeActualSize_0, @odeStatus);
	end;
	odeHasBeenMarshalled := 0;
	if (cd.lan = '') then
		odePtrNumber := 0
	else
		odePtrNumber := 1;
//	ode_dstb_register_ptr (odeStubType, odepArgInfo, cd.lan, 1, @odePtrNumber, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeMaxSize_2, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeOffset_2, odepStatus);
	ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, odeActualSize_2, odepStatus);
		ode_dstb_push_idl_char_array (odeStubType, odepArgInfo, 0, @cd.lan, odeActualSize_0, @odeStatus);
	end;

	end;
	(*  ODECOMMENT END MARSHALLING fractal open *)

	ode_dstb_call_rpc (
		odepArgInfo, 'fractal', 'fractal',
		'open', odeBindingHandle, nil,
		0, 0, @odeFaultStatus, @odeCommStatus, @odeStatus);

	(*  ODECOMMENT BEGIN UNMARSHALLING fractal open *)
	if (odeStatus = ode_s_ok) then
	begin

		odeResult := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);

	end;
	(*  ODECOMMENT END UNMARSHALLING fractal open *)

	ode_dstb_mar_cleanup (odepArgInfo, odeStubType, @odeStatus);

	open := odeResult;
   end;


function  close (
	handle : Cardinal
	)  :  client_data_t;

   var
	(*  ODECOMMENT BEGIN DECLARATIONS fractal close *)

	odepArgInfo  :  Pointer;
	odeStatus  :  Longint;
	odepStatus  :  Pointer;
	odeRpcIfspec  :  Pointer;
	odeSvcIfspec  :  Pointer;
	odeBindingHandle  :  Pointer;
	odeStubType : Longint;
	odeFaultStatus : Longint;
	odeCommStatus : Longint;
	odePtrNumber  :  Longint;
	odeHasBeenMarshalled  :  Longint;
	odeUseSmAllocate  :  Longint;
	odeNewNode  :  Longint;
	odeResult : client_data_t;
	odeActualSize_0 : Longint;
	odeMaxSize_0 : Longint;
	odeOffset_0 : Longint;
	odeIdx_0 : Longint;
	odeActualSize_1 : Longint;
	odeMaxSize_1 : Longint;
	odeOffset_1 : Longint;
	odeIdx_1 : Longint;
	odeActualSize_2 : Longint;
	odeMaxSize_2 : Longint;
	odeOffset_2 : Longint;
	odeIdx_2 : Longint;

	(*  ODECOMMENT END DECLARATIONS fractal close  *)

   begin
	odepArgInfo  := nil;
	odeStatus  := ode_s_ok;
	odepStatus  := @odeStatus;
	odeRpcIfspec  := nil;
	odeSvcIfspec  := nil;
	odeBindingHandle  := nil;
	odePtrNumber  := 0;
	odeHasBeenMarshalled  :=  0;
	odeUseSmAllocate  := 0;
	odeNewNode  := 0;
	odeRpcIfspec := ode_cln_ifspec_fractal_1_1 (odeStatus);
	odeStubType := ode_c_stub_is_client;
	odepArgInfo := ode_dstb_mar_init (
		odeStubType,
		odeRpcIfspec,
		odeSvcIfspec,
		@odeStatus);

	ode_dstb_init_ptr_table (odeStubType, odepArgInfo, @odeStatus);

	(*  ODECOMMENT BEGIN MARSHALLING fractal close *)
	if (odeStatus = ode_s_ok) then
	begin

		ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, handle, @odeStatus);

	end;
	(*  ODECOMMENT END MARSHALLING fractal close *)

	ode_dstb_call_rpc (
		odepArgInfo, 'fractal', 'fractal',
		'close', odeBindingHandle, nil,
		1, 0, @odeFaultStatus, @odeCommStatus, @odeStatus);

	(*  ODECOMMENT BEGIN UNMARSHALLING fractal close *)
	if (odeStatus = ode_s_ok) then
	begin

	ode_dstb_pop_align (odepArgInfo, 8, @odeStatus);
	Longint(odeResult.hostname) := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	Longint(odeResult.infrastructur) := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	Longint(odeResult.lan) := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
		odeResult.width := ode_dstb_pop_signed16 (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.height := ode_dstb_pop_signed16 (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.iterations := ode_dstb_pop_idl_byte (odeStubType, odepArgInfo, 0, @odeStatus);
	ode_dstb_pop_align (odepArgInfo, 8, @odeStatus);
		odeResult.mndset.imag_min := ode_dstb_pop_double (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.mndset.imag_max := ode_dstb_pop_double (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.mndset.real_min := ode_dstb_pop_double (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.mndset.real_max := ode_dstb_pop_double (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.rpc_requests := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.bytes_received := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.bytes_sent := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
		odeResult.rpc_time := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
	odeHasBeenMarshalled := 0;
	odePtrNumber := Longint(odeResult.hostname);
//	ode_dstb_inquire_ptr (odeStubType, odepArgInfo, odePtrNumber, @odeResult.hostname, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	odeMaxSize_0 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	if (odeResult.hostname = '') then
	begin
//	odeResult.hostname := AllocMem(sizeof(char));
	end;
	if (odeResult.hostname <> '') then
	begin
//	ode_dstb_store_ptr (odeStubType, odepArgInfo, odePtrNumber, odeMaxSize_0 * sizeof(char), odeResult.hostname, @odeHasBeenMarshalled, odepStatus);
	odeOffset_0 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	odeActualSize_0 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
		ode_dstb_pop_idl_char_array   (odeStubType, odepArgInfo, 0, @odeResult.hostname, odeActualSize_0, @odeStatus);
	end;
	end;
	odeHasBeenMarshalled := 0;
	odePtrNumber := Longint(odeResult.infrastructur);
//	ode_dstb_inquire_ptr (odeStubType, odepArgInfo, odePtrNumber, @odeResult.infrastructur, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	odeMaxSize_1 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	if (odeResult.infrastructur = '') then
	begin
//	odeResult.infrastructur := AllocMem(sizeof(char));
	end;
	if (odeResult.infrastructur <> '') then
	begin
//	ode_dstb_store_ptr (odeStubType, odepArgInfo, odePtrNumber, odeMaxSize_1 * sizeof(char), odeResult.infrastructur, @odeHasBeenMarshalled, odepStatus);
	odeOffset_1 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	odeActualSize_1 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
		ode_dstb_pop_idl_char_array   (odeStubType, odepArgInfo, 0, @odeResult.infrastructur, odeActualSize_0, @odeStatus);
	end;
	end;
	odeHasBeenMarshalled := 0;
	odePtrNumber := Longint(odeResult.lan);
//	ode_dstb_inquire_ptr (odeStubType, odepArgInfo, odePtrNumber, @odeResult.lan, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	odeMaxSize_2 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	if (odeResult.lan = '') then
	begin
//	odeResult.lan := AllocMem(sizeof(char));
	end;
	if (odeResult.lan <> '') then
	begin
//	ode_dstb_store_ptr (odeStubType, odepArgInfo, odePtrNumber, odeMaxSize_2 * sizeof(char), odeResult.lan, @odeHasBeenMarshalled, odepStatus);
	odeOffset_2 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	odeActualSize_2 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
		ode_dstb_pop_idl_char_array   (odeStubType, odepArgInfo, 0, @odeResult.lan, odeActualSize_0, @odeStatus);
	end;
	end;

	end;
	(*  ODECOMMENT END UNMARSHALLING fractal close *)

	ode_dstb_mar_cleanup (odepArgInfo, odeStubType, @odeStatus);

	close := odeResult;
   end;


function  get_next (
	handle : Cardinal;
	var outwidth : Longint;
	var row : variant 
	)  :  Longint;

   var
	(*  ODECOMMENT BEGIN DECLARATIONS fractal get_next *)

	odepArgInfo  :  Pointer;
	odeStatus  :  Longint;
	odepStatus  :  Pointer;
	odeRpcIfspec  :  Pointer;
	odeSvcIfspec  :  Pointer;
	odeBindingHandle  :  Pointer;
	odeStubType : Longint;
	odeFaultStatus : Longint;
	odeCommStatus : Longint;
	odePtrNumber  :  Longint;
	odeHasBeenMarshalled  :  Longint;
	odeUseSmAllocate  :  Longint;
	odeNewNode  :  Longint;
	odeResult : Longint;
	odeActualSize_0 : Longint;
	odeMaxSize_0 : Longint;
	odeOffset_0 : Longint;
	odeIdx_0 : Longint;

	(*  ODECOMMENT END DECLARATIONS fractal get_next  *)

   begin
	odepArgInfo  := nil;
	odeStatus  := ode_s_ok;
	odepStatus  := @odeStatus;
	odeRpcIfspec  := nil;
	odeSvcIfspec  := nil;
	odeBindingHandle  := nil;
	odePtrNumber  := 0;
	odeHasBeenMarshalled  :=  0;
	odeUseSmAllocate  := 0;
	odeNewNode  := 0;
	odeResult := 0;
	odeRpcIfspec := ode_cln_ifspec_fractal_1_1 (odeStatus);
	odeStubType := ode_c_stub_is_client;
	odepArgInfo := ode_dstb_mar_init (
		odeStubType,
		odeRpcIfspec,
		odeSvcIfspec,
		@odeStatus);

	ode_dstb_init_ptr_table (odeStubType, odepArgInfo, @odeStatus);

	(*  ODECOMMENT BEGIN MARSHALLING fractal get_next *)
	if (odeStatus = ode_s_ok) then
	begin

		ode_dstb_push_unsigned32 (odeStubType, odepArgInfo, 0, handle, @odeStatus);

	end;
	(*  ODECOMMENT END MARSHALLING fractal get_next *)

	ode_dstb_call_rpc (
		odepArgInfo, 'fractal', 'fractal',
		'get_next', odeBindingHandle, nil,
		2, 0, @odeFaultStatus, @odeCommStatus, @odeStatus);

	(*  ODECOMMENT BEGIN UNMARSHALLING fractal get_next *)
	if (odeStatus = ode_s_ok) then
	begin

		outwidth := ode_dstb_pop_signed32 (odeStubType, odepArgInfo, 0, @odeStatus);
		row := ode_dstb_pop_idl_byte_Dstr(odeStubType, odepArgInfo, 0, outwidth, @odeStatus);
		odeResult := ode_dstb_pop_signed32 (odeStubType, odepArgInfo, 0, @odeStatus);

	end;
	(*  ODECOMMENT END UNMARSHALLING fractal get_next *)

	ode_dstb_mar_cleanup (odepArgInfo, odeStubType, @odeStatus);

	get_next := odeResult;
   end;


function  query_server (
	var server_data : server_data_t
	)  :  Longint;

   var
	(*  ODECOMMENT BEGIN DECLARATIONS fractal query_server *)

	odepArgInfo  :  Pointer;
	odeStatus  :  Longint;
	odepStatus  :  Pointer;
	odeRpcIfspec  :  Pointer;
	odeSvcIfspec  :  Pointer;
	odeBindingHandle  :  Pointer;
	odeStubType : Longint;
	odeFaultStatus : Longint;
	odeCommStatus : Longint;
	odePtrNumber  :  Longint;
	odeHasBeenMarshalled  :  Longint;
	odeUseSmAllocate  :  Longint;
	odeNewNode  :  Longint;
	odeResult : Longint;
	odeActualSize_0 : Longint;
	odeMaxSize_0 : Longint;
	odeOffset_0 : Longint;
	odeIdx_0 : Longint;

	(*  ODECOMMENT END DECLARATIONS fractal query_server  *)

   begin
	odepArgInfo  := nil;
	odeStatus  := ode_s_ok;
	odepStatus  := @odeStatus;
	odeRpcIfspec  := nil;
	odeSvcIfspec  := nil;
	odeBindingHandle  := nil;
	odePtrNumber  := 0;
	odeHasBeenMarshalled  :=  0;
	odeUseSmAllocate  := 0;
	odeNewNode  := 0;
	odeResult := 0;
	odeRpcIfspec := ode_cln_ifspec_fractal_1_1 (odeStatus);
	odeStubType := ode_c_stub_is_client;
	odepArgInfo := ode_dstb_mar_init (
		odeStubType,
		odeRpcIfspec,
		odeSvcIfspec,
		@odeStatus);

	ode_dstb_init_ptr_table (odeStubType, odepArgInfo, @odeStatus);

	(*  ODECOMMENT BEGIN MARSHALLING fractal query_server *)
	if (odeStatus = ode_s_ok) then
	begin


	end;
	(*  ODECOMMENT END MARSHALLING fractal query_server *)

	ode_dstb_call_rpc (
		odepArgInfo, 'fractal', 'fractal',
		'query_server', odeBindingHandle, nil,
		3, 0, @odeFaultStatus, @odeCommStatus, @odeStatus);

	(*  ODECOMMENT BEGIN UNMARSHALLING fractal query_server *)
	if (odeStatus = ode_s_ok) then
	begin

	ode_dstb_pop_align (odepArgInfo, 4, @odeStatus);
	Longint(server_data.hostname) := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
		server_data.handles := ode_dstb_pop_unsigned16 (odeStubType, odepArgInfo, 0, @odeStatus);
		server_data.rpc_requests := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
		server_data.bytes_received := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
		server_data.bytes_sent := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
		server_data.rpc_time := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, @odeStatus);
	odeHasBeenMarshalled := 0;
	odePtrNumber := Longint(server_data.hostname);
//	ode_dstb_inquire_ptr (odeStubType, odepArgInfo, odePtrNumber, @server_data.hostname, @odeHasBeenMarshalled, odepStatus);
	if ((odeHasBeenMarshalled = 0) and (odePtrNumber <> 0)) then
	begin
	odeMaxSize_0 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
//	if (server_data.hostname = nil) then
	begin
//	server_data.hostname := AllocMem(sizeof(char));
	end;
	if (server_data.hostname <> '') then
	begin
	ode_dstb_store_ptr (odeStubType, odepArgInfo, odePtrNumber, odeMaxSize_0 * sizeof(char), server_data.hostname, @odeHasBeenMarshalled, odepStatus);
	odeOffset_0 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
	odeActualSize_0 := ode_dstb_pop_unsigned32 (odeStubType, odepArgInfo, 0, odepStatus);
		ode_dstb_pop_idl_char_array   (odeStubType, odepArgInfo, 0, @server_data.hostname, odeActualSize_0, @odeStatus);
	end;
	end;
		odeResult := ode_dstb_pop_signed32 (odeStubType, odepArgInfo, 0, @odeStatus);

	end;
	(*  ODECOMMENT END UNMARSHALLING fractal query_server *)

	ode_dstb_mar_cleanup (odepArgInfo, odeStubType, @odeStatus);

	query_server := odeResult;
   end;



end.
